/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD0";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    macros {
        k_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N0 &kp N0>;
            label = "NEW_MACRO";
        };

        zenkaku_hankaku: screen_copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LA(GRAVE) &kt ESCAPE>;
            label = "SCREEN_COPY";
        };
    };

    combos {
        compatible = "zmk,combos";

        BT_CLR_ {
            bindings = <&bt BT_CLR>;
            key-positions = <29 5 27>;
            layers = <0>;
            timeout-ms = <100>;
            require-prior-idle-ms = <100>;
        };

        BT_CLR_all {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <29 5 27 13>;
            layers = <0>;
            timeout-ms = <100>;
            require-prior-idle-ms = <100>;
        };

        POWER_OFF {
            bindings = <&ext_power EP_OFF>;
            key-positions = <9 16 10 2>;
            layers = <0>;
            timeout-ms = <100>;
            require-prior-idle-ms = <100>;
        };

        POWER_ON {
            bindings = <&ext_power EP_ON>;
            key-positions = <9 30 10 2>;
            layers = <0>;
            timeout-ms = <100>;
            require-prior-idle-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";

            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   | 
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC         &kp Q  &kp W  &kp E         &kp R         &kp T          &kp Y        &kp U            &kp I          &kp O    &kp P              &kp BACKSPACE
&kp LEFT_SHIFT  &kp A  &kp S  &kp D         &kp F         &kp G          &kp H        &kp J            &kp K          &kp L    &mt SEMICOLON SQT  &kp MINUS
&kp LCTRL       &kp Z  &kp X  &kp C         &kp V         &kp B          &kp N        &kp M            &kp COMMA      &kp DOT  &kp FSLH           &kp ENTER
                              &kp LEFT_ALT  &lt 1 DELETE  &lt 3 SPACE    &lt 3 ENTER  &lt 2 BACKSPACE  &kp LC(SPACE)
            >;
        };

        lower_layer {
            display-name = "NUMBER";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB  &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6     &kp N7  &kp N8      &kp N9  &kp SLASH     &kp DELETE
&trans   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp COMMA  &kp N4  &kp N5      &kp N6  &kp KP_MINUS  &kp LS(SINGLE_QUOTE)
&trans   &none         &none         &none         &out OUT_USB  &out OUT_BLE    &k_macro   &kp N1  &kp N2      &kp N3  &kp KP_PLUS   &kp LS(MINUS)
                                     &trans        &trans        &trans          &trans     &kp N0  &kp KP_DOT
            >;
        };

        raise_layer {
            display-name = "SYMBOL";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB          &kp EXCL         &kp AT           &kp HASH         &kp DLLR         &kp PRCNT          &kp LS(NUMBER_6)  &kp LS(N7)  &kp LS(N8)         &kp LS(N9)     &kp LS(MINUS)     &kp EQUAL
&trans           &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF    &none             &none       &kp RIGHT_BRACKET  &kp BACKSLASH  &kp LEFT_BRACKET  &kp INT_YEN
&rgb_ug RGB_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR    &none             &none       &none              &kp SLASH      &kp RS(INT_RO)    &kp LS(EQUAL)
                                                   &trans           &trans           &trans             &trans            &trans      &trans
            >;
        };

        layer_3 {
            display-name = "Fn";
            bindings = <
&kp TAB  &kp F1         &kp F2          &kp F3          &kp F4           &kp F5          &kp F6    &kp F7          &kp F8          &kp F9           &kp F10          &kp F11
&trans   &none          &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &none           &kp HOME  &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &none            &kp F12
&trans   &kp LS(LG(S))  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LEFT_GUI    &kp END   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PRINTSCREEN  &kp PAUSE_BREAK
                                        &trans          &trans           &trans          &trans    &trans          &trans
            >;
        };
    };
};
